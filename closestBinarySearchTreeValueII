# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def closestKValues(self, root, target, k):
        """
        :type root: TreeNode
        :type target: float
        :type k: int
        :rtype: List[int]
        """
        def dfs(node, t, h):
            if node is None:
                return
            dfs(node.left, t, h)
            if len(h) == k:
                heapq.heappushpop(h, (-abs(node.val - t), node.val))
            elif len(h) < k:
                heapq.heappush(h, (-abs(node.val - t), node.val))
            dfs(node.right, t, h)
            
        h = []
        dfs(root, target, h)
        res = []
        for _ in xrange(k):
            res.insert(0, heapq.heappop(h)[1])
        return res
